services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
    - ./services/zookeeper:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - ./services/kafka:/var/lib/kafka
  
  postgres:
    image: postgres:15
    container_name: postgresbd
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transactions_db
    ports:
      - "5432:5432"
    restart: always
    volumes:
    - ./services/postgres:/var/lib/postgresql/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - postgres
    volumes:
      - ./services/grafana:/var/lib/grafana 
      - ./services/grafana/conf/grafana.ini:/etc/grafana/grafana.ini:rw 

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow
    ports:
      - "8080:5000"
    volumes:
      - ./services/mlflow/db:/mlflow_backend
      - ./services/mlflow/artifacts:/mlruns
    command:
      - "mlflow"
      - "server"
      - "--host"
      - "0.0.0.0" # Escucha en todas las interfaces de red dentro del contenedor.
      - "--port"
      - "5000" # Puerto interno del contenedor.
      - "--backend-store-uri"
      - "sqlite:////mlflow_backend/mlflow.db" # Usa una BD SQLite para los metadatos en el volumen.
      - "--default-artifact-root"
      - "file:///mlruns" 

  producer:
    container_name: producer
    build: ./app/producer
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    volumes:
      - ./app/producer:/app
    environment:
      - KAFKA_BROKER=kafka:9092

  consumer:
    container_name: consumer
    build: ./app/consumer
    ports:
      - "8082:8080"
    depends_on:
      - kafka
      - postgres
      - mlflow
    volumes:
      - ./app/consumer:/app
    environment:
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_HOST=postgres
      - PPOSTGRES_PORT=5432
      - POSTGRES_DB=transactions_db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password


volumes:
  # Aquí se declaran los volúmenes para que Docker los gestione.
  # Esto asegura que los datos persistan incluso si el contenedor se elimina.
  mlflow_data:
  mlflow_artifacts: